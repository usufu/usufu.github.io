<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[新的折腾]]></title>
      <url>https://blog.v2root.com/2016/04/11/xin-de-zhe-teng/</url>
      <content type="html"><![CDATA[<p>昨晚和今天又折腾了下这个博客，从MWEB自带的换到了HEXO，因为这个主题我很喜欢，用的人也很多，所以打算折腾一下，结果这折腾不要紧，一下子花了好多时间。</p><a id="more"></a><p>刚开始知道hexo，懒得折腾，想着这也就是和其他的博客平台一样吧，博客以换主题为生，而且还要git上去md文件，让服务器生成静态页面。大概研究了下，发现还是本地搭环境，push生存的静态文件，这样我就可以用Mweb这个工具来写博客了。究竟能写几篇，难说哈。</p><p>到现在我都还不是特别熟悉MarkDown的语法，边写还要边查，显然时写的太少，而不是这个语法太麻烦。</p><p>大概总结下折腾的经过吧：</p><ul><li>安装<a href="https://hexo.io" target="_blank" rel="external">hexo</a>以及主题<a href="http://theme-next.iissnan.com" target="_blank" rel="external">next</a></li><li>根据文档配置好自己的设置</li><li>绑定域名</li><li>分别推送到github和coding</li><li>安装备份插件<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a></li><li>备份到coding，因为Github备份太慢了</li></ul><p>流程大概就是这样，但是也有些小问题</p><ul><li><p>next这个主题，如果我把fonts的镜像改为ustc的，通过浏览器的检查元素功能，发现还是访问的Google，没有起作用，大概调试了一下，发现是原主题的一个bug，提交了PR，已被merge。</p></li><li><p>还有就是这个备份插件，本来想在博客的git下面新建一个分支，用来备份，但是发现调用<code>hexo b</code>的时候会报错，也懒得跟踪调试了，就重新弄了个git repo用来专门做备份。</p></li></ul><p>到此为止，就差不多了，另外把原来ghost的博客也导入过来了，算是个大搬家吧，哈哈。</p><p><code>201604121631</code> 更新一下，upstream 原主题next的方法，留着以后用：</p><ul><li><p>首先fork原官方的主题repo到自己的github，然后将这个fork的repo，clone到本地</p></li><li><p>添加原官方主题repo为本地repo的upstream<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，然后按照如下指令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#添加upstream</span></div><div class="line">$ git remote add upstream git@github.com:iissnan/hexo-theme-next.git</div><div class="line"><span class="comment">#更新upstream</span></div><div class="line">$ git fetch upstream</div><div class="line"><span class="comment">#将upstream的代码导出到真正的themes下面，其中$HEXO表示为hexo的运行目录</span></div><div class="line">$ git archive upstream/master | tar -x -C <span class="variable">$HEXO</span>/themes/next/</div></pre></td></tr></table></figure></li><li><p>然后根据<a href="https://github.com/iissnan/hexo-theme-next/issues/328" target="_blank" rel="external">issue#328</a>的描述，将主题的配置文件移动到$HEXO/source/_data/next.yml</p></li></ul><p>现在，配置主题什么的就相对独立了。</p><p>生活到此，也懒得折腾，心里确实很想写点东西，但又懒得写，我在浪费生命的感觉。未来会是什么样子呢？!!!</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">Syncing a fork</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[test mweb]]></title>
      <url>https://blog.v2root.com/2016/04/11/test-mweb/</url>
      <content type="html"><![CDATA[<p>test mweb editor</p><a id="more"></a><p><img src="/mweb_media/Hacker%20are%20Limited.jpg" alt="Hacker are Limited"></p><h1>MWeb - 专业的 Markdown 写作、记笔记、静态博客生成软件</h1><h2 id="专业的-markdown-写作支持">专业的 Markdown 写作支持</h2><ul><li>极简 UI、Dark Mode、漂亮的 Markdown 语法高亮、列表缩进优化，提供 5 种主题选择。</li><li>除了支持基本的 Markdown 语法外，还支持大量 Markdown 扩展语法：Table、TOC、MathJax、Fenced code block、任务列表（Task lists）、顺序图和流程图、Footnote 等。</li><li>支持 Typewriter Scrolling（打机滚动模式）<code>View</code> - <code>Typewriter Scrolling</code>。</li><li>支持发布和<strong>更新</strong>到：Wordrpess 博客、支持 Metaweblog API 的博客服务、<a href="http://Wordpress.com" target="_blank" rel="external">Wordpress.com</a>、Evernote 和印象笔记、Blogger、Tumblr。请在 <code>Preferences</code> - <code>Publishing</code> 增加发布服务，然后点击软件右上角的分享按钮即可看到所增加的发布服务。</li><li>支持即时预览并提供 6 种预览主题，其中二种和静态博客主题相对应，也就是说您在写博客时可以即时预览大概效果！所有主题效果都支持导出为 HTML、PDF。快捷键 <code>CMD + R</code> 或 <code>CMD + 4</code> 打开即时预览窗口。</li><li>编辑器和实时预览都支持大纲视图，长文档时跳转非常方便。</li></ul><!-- more --><h2 id="设计为两种模式">设计为两种模式</h2><ul><li>外部文档模式：用于新建、打开和编辑外部 Markdown 文档。也支持引入外部文件夹到 MWeb 中管理。</li><li>文档库模式：用分类树管理文档，可以把文档设为多个分类，用于记笔记和静态网站生成。</li></ul><p><code>CMD + E</code> 或使用菜单 <code>View</code> - <code>Open External</code> 可打开外部文档模式。</p><p><code>CMD + L</code> 或使用菜单 <code>View</code> - <code>Open Library</code> 可打开文档库。</p><p>文档库模式和外部模式都支持<strong>全文搜寻（Full Text Search）</strong>，都可以用拖放或粘贴插入图片并直接显示。<code>CMD + V</code> 粘贴为JPG格式，<code>CMD + Shift + V</code> 粘贴为PNG透明格式。</p><p>外部模式引入 Octpress、Jekyll 等静态博客的文件夹后也支持拖放或粘贴插入图片和实时预览，详细请参考：<a href="http://zh.mweb.im/mweb-1.4-add-floder-octpress-support.html" target="_blank" rel="external">引入文件夹到 MWeb 中管理，支持 Octpress、Jekyll 等静态博客拖拽插入图片和实时预览</a></p><h2 id="文档库模式用于记笔记">文档库模式用于记笔记</h2><p>文档库模式使用分类树组织和管理文档，支持拖放或粘贴插入图片并直接显示，插入非图片则会生成连结。<br>支持把 Markdown 或文本文档导入到文档库，也支持把整个分类或者文档（可选多个）导出为 HTML、PDF、Markdown。</p><p>更详细的信息请看：<a href="http://zh.mweb.im/mweb-document-library.html" target="_blank" rel="external">MWeb 文档库模式详细说明</a></p><h2 id="文档库模式用于静态博客生成">文档库模式用于静态博客生成</h2><p>一键把分类生成静态博客，目前可选二个主题，支持自定主题。只要填入 Disqus、多说提供的代码即可以为博客增加评论功能。可勾选让网站支持 MathJax 和顺序图、流程图。</p><p>更详细的信息请看：<a href="http://zh.mweb.im/mweb-static-blog-generator.html" target="_blank" rel="external">MWeb 生成静态博客详细说明</a>、<a href="http://zh.mweb.im/mweb-1.4-static-blog-extension.html" target="_blank" rel="external">静态博客功能增强</a></p><p><img src="http://7d9p0b.com1.z0.glb.clouddn.com/Fk_slpvE9jCbgVmMWOLdRSgnI9O1-shuiyin" alt="2016-01-03-233446-1"></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First Post]]></title>
      <url>https://blog.v2root.com/2016/04/10/First-Post/</url>
      <content type="html"><![CDATA[<p>test test test</p><h1>Markdown 语法和 MWeb 写作使用说明</h1><h2 id="markdown-的设计哲学">Markdown 的设计哲学</h2><blockquote><p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p></blockquote><a id="more"></a><h2 id="本文约定">本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + R</code> 预览才可以看效果。</p><h2 id="标题">标题</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 第一级标题 `&lt;h1&gt;` </div><div class="line">## 第二级标题 `&lt;h2&gt;` </div><div class="line">###### 第六级标题 `&lt;h6&gt;`</div></pre></td></tr></table></figure><p>效果如下：</p><h1>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-h2">第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-h6">第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调">强调</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*这些文字会生成`&lt;em&gt;`*</div><div class="line">_这些文字会生成`&lt;u&gt;`_</div><div class="line"></div><div class="line">**这些文字会生成`&lt;strong&gt;`**</div><div class="line">__这些文字会生成`&lt;strong&gt;`__</div></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p><p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p><p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p><h2 id="换行">换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p><h2 id="列表">列表</h2><h3 id="无序列表">无序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 项目一 无序列表 `* + 空格键`</div><div class="line">* 项目二</div><div class="line">	* 项目二的子项目一 无序列表 `TAB + * + 空格键`</div><div class="line">	* 项目二的子项目二</div></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p><ul><li>项目一 无序列表 <code>* + 空格键</code></li><li>项目二<ul><li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li><li>项目二的子项目二</li></ul></li></ul><h3 id="有序列表">有序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. 项目一 有序列表 `数字 + . + 空格键`</div><div class="line">2. 项目二 </div><div class="line">3. 项目三</div><div class="line">	1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</div><div class="line">	2. 项目三的子项目二</div></pre></td></tr></table></figure><p>效果如下：</p><ol><li>项目一 有序列表 <code>数字 + . + 空格键</code></li><li>项目二</li><li>项目三<ol><li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li><li>项目三的子项目二</li></ol></li></ol><h3 id="任务列表-task-lists">任务列表（Task lists）</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</div><div class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</div></pre></td></tr></table></figure><p>效果如下：</p><ul><li>[ ] 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li>[x] 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h2 id="图片">图片</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![GitHub set up](https://zh.mweb.im/asset/img/set-up-git.gif)</div><div class="line">格式: ![Alt Text](url)</div></pre></td></tr></table></figure><p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p><p><img src="https://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><h2 id="链接">链接</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">email &lt;example@example.com&gt;</div><div class="line">[GitHub](http://github.com)</div><div class="line">自动生成连接  &lt;http://www.github.com/&gt;</div></pre></td></tr></table></figure><p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p><p>Email 连接： <a href="mailto:example@example.com" target="_blank" rel="external">example@example.com</a><br><a href="http://github.com" target="_blank" rel="external">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a> 这样</p><h2 id="区块引用">区块引用</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某某说:</div><div class="line">&gt; 第一行引用</div><div class="line">&gt; 第二行费用文字</div></pre></td></tr></table></figure><p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p><p>某某说:</p><blockquote><p>第一行引用<br>第二行费用文字</p></blockquote><h2 id="行内代码">行内代码</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像这样即可：`&lt;addr&gt;` `code`</div></pre></td></tr></table></figure><p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p><p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p><h2 id="多行或者一段代码">多行或者一段代码</h2><p>Markdown 语法：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;div:<span class="string">'#foo'</span>&#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(arg) &#123;</div><div class="line">		$.facebox(&#123;div:<span class="string">'#foo'</span>&#125;)</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="顺序图或流程图">顺序图或流程图</h2><p>Markdown 语法：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
</code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure><p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">http://adrai.github.io/flowchart.js/</a></p><h2 id="表格">表格</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一格表头 | 第二格表头</div><div class="line">--------- | -------------</div><div class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</div><div class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</div></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>第一格表头</th><th>第二格表头</th></tr></thead><tbody><tr><td>内容单元格 第一列第一格</td><td>内容单元格第二列第一格</td></tr><tr><td>内容单元格 第一列第二格 多加文字</td><td>内容单元格第二列第二格</td></tr></tbody></table><h2 id="删除线">删除线</h2><p>Markdown 语法：</p><pre><code>加删除线像这样用： ~~删除这些~~
</code></pre><p>效果如下：</p><p>加删除线像这样用： <s>删除这些</s></p><h2 id="分隔线">分隔线</h2><p>以下三种方式都可以生成分隔线：</p><pre><code>***

*****

- - -
</code></pre><p>效果如下：</p><hr><hr><hr><h2 id="mathjax">MathJax</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">块级公式：</div><div class="line">$$	x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</div><div class="line"></div><div class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</div><div class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</div><div class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</div><div class="line"></div><div class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</div></pre></td></tr></table></figure><p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p><p>块级公式：<br>$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><h2 id="脚注-footnote">脚注（Footnote）</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个脚注：[^sample_footnote]</div></pre></td></tr></table></figure><p>效果如下：</p><p>这是一个脚注：<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="注释和阅读更多">注释和阅读更多</h2><!-- more --><p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时。</p><h2 id="toc">TOC</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这里是脚注信息 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[It's Time To Leave]]></title>
      <url>https://blog.v2root.com/2014/09/19/dream/</url>
      <content type="html"><![CDATA[<p>Dream.</p><a id="more"></a><p><img src="/mweb_media/IMG_1015.jpg" alt="IMG_1015"></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 5, Sell Stock II]]></title>
      <url>https://blog.v2root.com/2014/08/18/leetcode-5-sell-stock-ii/</url>
      <content type="html"><![CDATA[<p>####题目<br>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><a id="more"></a><p>####思路</p><p>这道题我拖了好久才搞，刚开始没有看懂题目，觉得老复杂了是不是要用到动态规划贪心算法什么的，就搁置了很久。结果还是在网上看了提示才发现原来直接求递增序列的和就可以了。</p><p>如果把股票的价格画成曲线，那么我们只要去求所有递增区间的值就可以了，具体思路就是找到拐点，然后计算拐点之前最大值与最小值之间的差值，那么这就是我们所要求的利润。最后直到数组遍历结束。中间有个小插曲，在LeetCode上提交代码的时候，忘了判断边界，结果一直Runtime Error。</p><p>####代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (prices.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = prices.begin();</div><div class="line">        <span class="keyword">int</span> new_price = *it;</div><div class="line">        <span class="keyword">int</span> last_good_price = *it;</div><div class="line">        <span class="keyword">while</span> (it != prices.end()) &#123;</div><div class="line">            <span class="keyword">if</span> (*it &gt;= last_good_price) &#123;</div><div class="line">                last_good_price = *it;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                profit += (last_good_price - new_price);</div><div class="line">                new_price = *it;</div><div class="line">                last_good_price = *it;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        profit += (last_good_price - new_price);</div><div class="line">        <span class="keyword">return</span> profit;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清醒反省]]></title>
      <url>https://blog.v2root.com/2014/08/16/qing-xing-qing-xing/</url>
      <content type="html"><![CDATA[<p>清醒清醒，为什么这么说呢，因为这过去的一周我似乎陷入了一种无法控制的迷茫和混沌状态。记录一下反省和思考吧</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/pain%20give%20some%20thing.png" alt="cover-image"></p><p>####反省</p><p>每天晚上都睡的很晚，导致一整天精神状态都不是很好，每次都说今晚要早点睡，但是到了最后还是墨迹到一两点钟，关键在于我这些时间都在干什么？无非是刷网页，看一些无关痛痒的东西，拖延症，没有发挥关键作用的强迫症集中在一起，打垮了我内心的力量。</p><p>看看我每天的作息规律：</p><blockquote><p>8:30 起床 9:30 到单位 18:30 吃完饭下班到家</p></blockquote><p>看起来还是挺幸福规律的，基本不用加班，每天都有自己的时间，本来计划用这段自己的时间学习一些新的东西，可是每每到了家，打开电脑，在网上傲游一番之后，已经到了该睡觉休息的时间，所以总觉得自己在业余没有什么进步，浪费了时间，结果导致躺在床上就会很不安，睡眠质量就会下降，如此反复，恶性循环，岂能快哉？</p><p>####浮躁</p><p>这段时间太浮躁，事实证明在没有目的和计划的前提下去做事情渐渐的会让自己失去斗志，侵蚀掉坚持下去的恒心，然后就可以用一个字来概括，那就是<strong>懒</strong>。</p><p>浮躁和懒看起来是不太相关的词汇，但是当你在浮躁的时候安静下来，仔细思考一番的时候，原来懒的源泉就是自己的浮躁导致的盲目，盲目就会没有激情，没有激情就会变懒。要想让自己能够保持清醒，乐观向上，就要有一颗恒心，有计划，有目的，有把一件事努力做下去的激情。</p><p>我干什么有激情？</p><p>想想自己该怎么回答这个问题，想想自己这一周以及最近半个月都做了哪些事情？我对瞎折腾真是情有独钟啊！搞翻墙、搞VPS、搞VPS之间的测速、配置能搞好几天，这些都有什么用呢？无非是让自己上Google能爽快一点，可是我最近又用Google做了哪些有意义的事情呢？</p><p>我的轻微“强迫症”没有发挥积极的作用，反而在这些瞎折腾上面发挥了巨大作用，为了试一试TCP拥塞控制算法的差别，非要搞几个VPS来一个个试，而且还要在网络高峰期试一遍才肯罢休；VPS官方测速链接很快，自己的就很慢，觉得这不科学，非要看看为什么自己的就慢，跟客服各种沟通，结果发现是电信路由原来不通的IP走的route不一样，有的IP连过去在出国路由不会掉包，有的IP连过去90%的丢包率，这个就解释了我心中的疑惑为什么Linode官方测速链接很快，但自己的就只有几十K，为了实验这个东西，我把VPS删了重建重配，直到试出来一个速度可以的IP才收手。</p><p>我要是能把这种毫无营养的瞎折腾用在该用的地方，我是不是也是个人才了。</p><p>有时候真不知道自己该干什么了，现在确实感觉到了没有家的盲目和空洞，没有目标，没有思想，没有了斗志，想想真是可怕。</p><p>不行，还是待改变。</p><p>前段时间和一个组里的同事聊天，他transfer去其它部门了，他就有他自己的追求，觉得在其它部门更能实现他自己的追求与梦想。比比看真是惭愧，我是不是也该给自己一点喘息与改变的机会了呢？</p><p>其实我肯定是要离开的，在公司这几年我已经做了我该做的事情，以前舍不得的原因或许是因为某个人，现在她也有人照顾了，我也做了我所有可以以及能做的事情，虽然这四年当中错过了一些人也有点对不住自己，没办法谁让我是个纠结并执着的人呢，不过这也算是一个比较好也比较让自己放心的结局了吧，这个时候离开就没有以前那么让人难以割舍。纵然我现在的同事们都很nice，对我也都很好，工作也很舒服，住的又近，可是有些事情长痛不如短痛，还是要在合适的时候给自己当头一棒，这样才能保持清醒与激情。</p><p>####思考与改变</p><p>好好的思考一下自己想要干什么，以及怎么做的事情还是比较有挑战的，这需要权衡太多东西，比如我现在就有一点还没有想明白:<code>要不要留在魔都</code>。这个问题现在来说真的很难想明白。其实我挺想回家的，可是回家又没有好的工作，在魔都又太过于孤单，而且吃饭又不方便，真是很纠结。</p><p>和同学业余时间在搞一个东西，也不知道这个东西最终能不要能成功，但是我这个好哥们儿的态度还是很让我敬佩的，为了这个项目奔波操劳了好几个月，不管最后成功与否，至少我觉得这个好哥们我们看错，算是我研究僧阶段的一个挚友吧，和大学时代的一样。有时候用FaceTime讨论问题，瞎扯淡也是比较欢乐，可惜这哥们在深圳，要是在上海的话说不定我也不会那么无聊，虽然上海的同学也有，但是能聊到一起，有共同三观的人却没有。这是我比较可悲的一点，三观不同，就是聊不来，关系就不会特别近了，虽然也是好朋友，但远不及好哥们的范畴。我觉得人这一生好朋友可以有很多，但是好哥们真是可遇而不可求，比较个体都有很大的差异，三观基本一致的实在是很难。</p><p>闲话有扯原来，我发现这里瞎扯一扯舒服了很多，也清醒了很多。下面想一想计划吧，既然暂时还无法离开上海，那就在上海挪个窝吧，目的只有一个，加强自己挪窝的能力。</p><p>其它不好说，但是就像以前博客里写的，以及我同学找工作的经验，算法必须准备，所以我待利用这后面的几个月时间好好学习学习算法，总体来说大致想法就是：</p><ul><li>不能自欺欺人，不能一边逛论坛，一边说今天啥也没看</li><li>睡前读几页书<ul><li><a href="http://book.douban.com/subject/1013208/" target="_blank" rel="external">《如何阅读一本书》</a></li></ul></li><li>每周至少做一道算法题<ul><li>LeetCode</li></ul></li><li>除非不可用，不在折腾翻墙以及博客VPS</li><li>简单的时间计划<ul><li>19点出门散步锻炼</li><li>20点开始干正事</li><li>23点开始洗漱睡觉</li></ul></li></ul><p>虽然这些计划看起来没什么，但能坚持也算进步，虽然每天只有三小时的时间学习干正事，但若这3小时能够不浪费，也会有很大的进步了。</p><p>扯着扯着就到这里了，明天好好的整理一下印象笔记吧。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的利用UEVENT监控USB热插拔的例子]]></title>
      <url>https://blog.v2root.com/2014/08/12/-ge-jian-dan-de-li-yong-ueventjian-kong-usbre-cha-ba-de-li-zi/</url>
      <content type="html"><![CDATA[<p>最近工作中要用到UEVENT这个东东，记录一下. 最主要的就是怎么把UEVENT收到的消息给分析一下，刚开始不知道，直接打出来一串东西，原来返回的值里面有‘\0’, 把它换为‘\n’就能打出来了。这个东西虽然很简单，但是不知道的情况下还是需要研究一番才能用起来，而且KMD那边印度哥们给我的patch不能用，会导致系统挂掉，我研究了一下，貌似是由于异步的原因，kernel发送event上来的时候貌似是要走异步的，但印度哥们可能为了偷懒给我直接嫁接在isr的handler里面了，没有放到队列里导致的。不知道这个是我们KMD驱动的设计问题还是内核这样要求的，有空在研究一下。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/netlink.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UEVENT_BUFFER_SIZE 2048</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_hotplug_sock</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> buffersize = <span class="number">1024</span>;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> sockaddr_nl snl;</div><div class="line">    bzero(&amp;snl, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_nl));</div><div class="line">    snl.nl_family = AF_NETLINK;</div><div class="line">    snl.nl_pid = getpid();</div><div class="line">    snl.nl_groups = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> s = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_KOBJECT_UEVENT);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">            perror(<span class="string">"socket"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    setsockopt(s, SOL_SOCKET, SO_RCVBUF, &amp;buffersize, <span class="keyword">sizeof</span>(buffersize));</div><div class="line"></div><div class="line">    ret = bind(s, (<span class="keyword">struct</span> sockaddr *)&amp;snl, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_nl));</div><div class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">            perror(<span class="string">"bind"</span>);</div><div class="line">            close(s);</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> hotplug_sock = init_hotplug_sock();</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line">    <span class="keyword">struct</span> iovec iov;</div><div class="line">    <span class="keyword">struct</span> msghdr msg;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;msg,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg));</div><div class="line">    iov.iov_base=(<span class="keyword">void</span> *)buf;</div><div class="line">    iov.iov_len=<span class="keyword">sizeof</span>(buf);</div><div class="line">    msg.msg_name=(<span class="keyword">void</span> *)&amp;sa;</div><div class="line">    msg.msg_namelen=<span class="keyword">sizeof</span>(sa);</div><div class="line">    msg.msg_iov=&amp;iov;</div><div class="line">    msg.msg_iovlen=<span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">            <span class="comment">/* Netlink message buffer */</span></div><div class="line">            <span class="keyword">char</span> buf[UEVENT_BUFFER_SIZE * <span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">            recvmsg(hotplug_sock, &amp;msg, <span class="number">0</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</div><div class="line">         	<span class="keyword">if</span>(len&lt;<span class="number">0</span>)</div><div class="line">        		<span class="built_in">printf</span>(<span class="string">"receive error\n"</span>);</div><div class="line">    		<span class="keyword">else</span> <span class="keyword">if</span>(len&lt;<span class="number">32</span>||len&gt;<span class="keyword">sizeof</span>(buf))</div><div class="line">        		<span class="built_in">printf</span>(<span class="string">"invalid message"</span>);</div><div class="line">    		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        		<span class="keyword">if</span>(*(buf+i)==<span class="string">'\0'</span>)</div><div class="line">            		buf[i]=<span class="string">'\n'</span>;</div><div class="line">    		<span class="built_in">printf</span>(<span class="string">"received %d bytes\n%s\n"</span>,len,buf);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[删除 Mac 上下载失败的 App 图标]]></title>
      <url>https://blog.v2root.com/2014/08/11/shan-chu-mac-shang-xia-zai-shi-bai-de-app-tu-biao/</url>
      <content type="html"><![CDATA[<p>最近从网上发现了这么一个技巧，记录一下，以免以后强迫症犯了图标删不干净抓狂。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/1.%20Got%20Root%20Wallpaper%20my%20Pcbots%20WideScreen%20HD.png" alt="cover-image"></p><ul><li>终端里运行<code>lsof | grep Dock | grep db/</code></li><li>找到形如 <code>/private/var/folders/95/3z3m_v7d1tv6hjkk4r9qn35r0000gn/0/com.apple.dock.launchpad/db/db</code> 的文件</li><li>终端里运行 <code>sqlite3 /private/var/folders/95/3z3m_v7d1tv6hjkk4r9qn35r0000gn/0/com.apple.dock.launchpad/db/db</code></li><li>执行 <code>SELECT * FROM downloading_apps</code>，会列出正在下载的 App，包括失败的：<em>416|Airmail|it.bloop.airmail|573171375||</em></li><li>执行 <code>DELETE * FROM downloading_apps WHERE item_id = 416</code> 干掉失败的，或者干脆 <code>DELETE FROM downloading_apps</code> 全部清空；</li><li>通过 Activity Monitor 找到 Dock 退出让其重启即可搞定。</li></ul><p>以上就是全部步骤了，看起来还是挺有用的。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Time for Leisure]]></title>
      <url>https://blog.v2root.com/2014/08/10/-zhou-zong-jie/</url>
      <content type="html"><![CDATA[<p>最近这段时间好像什么都没有做，每天下班回家就是吃吃饭、写写字、溜溜弯、玩电脑。但是其实还是一直在折腾一件事情，就是不停的测速、翻墙、找性价比高的VPS，真是又犯了年轻时的毛病、魔怔了。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/14.%20Sniper%20wait%20for%20Right%20Time.jpg" alt="cover-image"><br>折腾这些没有意义的事情，浪费时间不说也熬身体，每天晚上都能折腾到很晚，第二天上班都没有精神了，真是No Zuo No Die的节奏，不能在这样了哦同学，你是要屎么。</p><p>总结下这两天都折腾了些什么</p><ul><li>博客从DO切换到了OneAsiaHost, 速度变快了有没有。但是花了我12美刀一个季度，赶紧把DO的删了这样DO里的钱还在，留着以后用。</li><li>买了一个Ramnode年付15刀的作为备份VPS，虽然ping值略高，但是下载速度也不错。</li><li>注册了Linode，冲了5刀送了50刀，小用了一下，没舍得放开了用，高富帅的东西咱待留着最后使。</li><li>不停的折腾SS，不停的换端口，不停的在不同的时间段测速，这是最TM无聊的一点，我到底在干嘛？</li></ul><p>不能在这么无聊的折腾了，赶紧学习起来吧，就当前段时间放松去了。</p><p>我还发现一个问题，有时候偶尔在网上发现几个比较好用的命令，但是很短小我又懒的动用Evernote或者Gist这样的大块头来记录，到头来用到的时候还是待再搜索一遍，效率奇低，有没有什么好的办法呢？就是专门给懒人用的。目前我是随手拿笔记录在本子上，偶尔还能翻开来看一看，就像背单词一样，说不定就一下子记住了呢。</p><p>赶紧赶紧，生活要多姿多彩才行。<br><img src="https://dn-ghost-v2root.qbox.me/image/d/2c/1105b8446d92aaa75df4572412c21.JPG" alt=""></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 4, Reverse Integer]]></title>
      <url>https://blog.v2root.com/2014/08/04/leetcode-4-reverse-integer/</url>
      <content type="html"><![CDATA[<p>题目:</p><p>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p><p>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p><p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p><p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of <em>1000000003</em> overflows. How should you handle such cases?</p><p>Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/write-code.png" alt="cover-image"></p><p>思考:</p><p>这道题我的思考过程是先想办法读取出这个整数的每一位，然后在组装，其间也有很多弯路慢慢完善。</p><p>一开始想到要判断符号位,在最后组装的时候可以保证符号位的准确，然后怎么读取出每一位呢？我只能想到笨办法，就是不停的对这个输入的整数以10为基做取模操作，比如321，先对10取余我们能得到末尾的1，然后以32再取余就能得到2，最后就能得到3了，而且这个顺序刚好就是我们要的顺序, 这样我们通过一个循环就能够得到我们需要的每一位数字了。</p><p>得到我们要的数字之后，怎么把它再按照要求的数序组装回去呢？这个地方我饶了些弯路，首先我刚开始是通过strlen的方法来读取命令行参数的长度，在以是否为负数来判断数字的长度，然后就可以组装了，但是当我以为这个方法可行的时候，发现原来LeetCode的输入就是整形不能用判断字符串长度的方法来搞，哈，这下傻了，看来还待在想想。</p><p>按照取每一位数字的方法，我们也可以以这种方式来给取到的每一位数字做乘积，也就是把它放到合适的位置上去。比如说321，我们拿到1之后，应该把它放到哪里去呢？我还是只想到了这个笨办法，就是在嵌套一个for循环，让321不停的被10除，直到最后比10小为止，在这个例子里，当拿到1之后，321 能被10 除两次，那么它的base就是100， 最后的计算结果就是1 * 100 = 100了。</p><p>按照这个思路写出的可以被Accept的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = x;</div><div class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (num / <span class="number">10</span> != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> a = num % <span class="number">10</span>;</div><div class="line">            <span class="keyword">int</span> base = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt;= <span class="number">10</span> || i &lt;= <span class="number">-10</span>; i = i / <span class="number">10</span>)</div><div class="line">            &#123;</div><div class="line">                base = base * <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            rev = rev + a * base;</div><div class="line">            num = num / <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (rev + num);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>到这里，虽然结果能被接收，没有正负数，以及末尾的0的问题，但是对溢出还是没有考虑到，如果输入<em>1000000003</em> 结果就会溢出, 对溢出的行为应该怎么办呢？</p><p>网上看到了一个比较好的版本，基本思路是一样的，但是比我的代码精简了很多，而且比较清晰，我怎么就这么笨呢，人家一个while就搞定了，我还费事的搞两个，怎么就没有想到其实第一次拿到1之后放在第二次x10和第三次x10也是可以的啊，小学数学没过关啊。优化后的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num = x;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">int</span> rev = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sign = <span class="number">0</span>;</div><div class="line">    num &gt; <span class="number">0</span> ? sign = <span class="number">1</span> : sign = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (num / <span class="number">10</span> != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a = num % <span class="number">10</span>;</div><div class="line">        rev = rev * <span class="number">10</span> + a;</div><div class="line">        num = num / <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rev + num &gt; INT_MAX)</div><div class="line">        <span class="keyword">return</span> INT_MAX;</div><div class="line">    <span class="keyword">if</span> (rev + num &lt; INT_MIN)</div><div class="line">        <span class="keyword">return</span> INT_MIN;</div><div class="line">    <span class="keyword">return</span> (rev + num);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 3, Same Tree]]></title>
      <url>https://blog.v2root.com/2014/08/03/leetcode-3-same-tree/</url>
      <content type="html"><![CDATA[<p>今天这道题还是比较简单的，但是我自己在纸上写的代码还是没有能够一次性通过，对递归的使用还是不够熟练。</p><p><strong>题目</strong></p><p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/write-code.png" alt="cover-image"><br><strong>分析</strong></p><p>既然要判断两棵树是不是完全相同，题目里已经说明了，不光节点的值要相同，而且形态也要一样，就是说节点的左右子树也要保持一样的深度。</p><p>我一开始想的是能不能使用在第一个练习里面实现过的maxDepth来判断左右子树的最大深度是否一致，进而能够将形态的判断完成然后再去看value的值是否一样。但这样一来，就需要两个递归函数了，应该还有比这个更简单的解法。</p><p>反过来想想<code>isSameTree</code>已经打算是一个递归函数了，那么能不能把这两个功能整合进一个里面去呢，答案显然是肯定的了。我们在<code>isSameTree(BinaryTree *T1, BinaryTree *T2)</code>里面就能够完成所有的判断，这个函数做这么几件事情：</p><ul><li>判断T1和T2是否全部为空，如果为空说明是两个空节点，那么它们是相等的，返回true</li><li>如果T1或者T2其中有一个为空，另外一个不为空，那么他们就是不等的，直接返回false</li><li>走到这里，说明对节点本身最基本的形态已经判断完成了，那么就可以看看value是否一致了，如果T1和T2的value一致，就可以递归去判断这两个节点的子树了，否则的话直接返回false</li></ul><p>是不是很简单呢，这些问题都是上学的时候学习过的，但时间久了就忘记了，这道题目主要卡在对于递归出口条件的定位和使用，所以一开始能想到用递归左右子树，但是不知道怎么写出口条件。对递归的理解还是不够深入。</p><p>最后Accept的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode *p, TreeNode *q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>) </div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> ((q == <span class="literal">NULL</span> &amp;&amp; p != <span class="literal">NULL</span>) || (p == <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>)) </div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">        <span class="keyword">if</span> (p-&gt;val == q-&gt;val) &#123;</div><div class="line">            <span class="keyword">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这里面还犯了一个毛病就是一开始写成这样了</p><blockquote><p>return isSameTree(p-&gt;left, q-&gt;left) == isSameTree(p-&gt;right, q-&gt;right) == true;</p></blockquote><p>真是太大意了。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 2, Maximum Depth of Binary Tree]]></title>
      <url>https://blog.v2root.com/2014/08/02/leetcode-2-maximum-depth-of-binary-tree/</url>
      <content type="html"><![CDATA[<p>今天这道题比较简单，就不罗说了，是一个二叉树深度的判断，直接放代码记录一下，这里用了递归，应该还有更好的方法，有空了再想一想。</p><p><strong>题目</strong></p><p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/write-code.png" alt=""><br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">int</span> imaxDepth = <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</div><div class="line">            <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</div><div class="line">            imaxDepth = imaxDepth + (leftDepth &gt; rightDepth ? leftDepth : rightDepth);</div><div class="line">            <span class="keyword">return</span> imaxDepth;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[改进版的翻墙PAC文件]]></title>
      <url>https://blog.v2root.com/2014/08/02/gai-jin-ban-de-fan-qiang-pacwen-jian/</url>
      <content type="html"><![CDATA[<p>最近用了很多翻墙的pac文件，从最开始的<a href="https://code.google.com/p/autoproxy-gfwlist/" target="_blank" rel="external">gfwlist</a>到<a href="https://github.com/Leask/Flora_Pac" target="_blank" rel="external">Floar_pac</a>,再到用了一段时间的被<a href="https://github.com/clowwindy" target="_blank" rel="external">clowwindy</a>优化过时间复杂度为o(1)的<a href="https://github.com/clowwindy/gfwlist2pac" target="_blank" rel="external">gfwlist2pac</a>。</p><p>这些pac文件里面效率最高，Performance最好的当属gfwlist2pac了，但是也有问题就是黑名单更新不够及时，有些国外网站走代理可能会更快些，这时候我就需要手动去修改这个pac文件里面的list来达到我的目的。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/image/5/cd/369dec1e13c36cab7cff35497b677.jpg" alt="cover-image"><br>Flora_pac呢，可以自动根据IP的归属地来判断，如果不是国内ip段则走翻墙代理，否则直连，这个看起来是比较符合我预期的，但是也有几个问题：</p><ul><li>性能不够好，国内iplist还是比较长，查找需要耗时</li><li>有的网站，虽然IP在国外，但是直连的速度要比走代理的速度快</li><li>在公司内部本身访问网络就需要设内部代理的情况下不太好用</li></ul><p>事已至此，那我就着手稍微改善一下吧，改进其实挺简单，只有以下这么几个点：</p><ul><li>以Floar_pac为Base，整合gfwlist2pac的function，以O(1)的时间查找黑名单和白名单</li><li>改进一下Floar_pac的iplist查找算法，在二分查找的基础上增加分组，减少查找时的比较次数</li><li>增加对内网代理的支持</li><li>增加了对pac文件的压缩，引入jsmin</li><li>原始的Flora_pac会对采集到的iplist做近似处理，它只处理读到的iplist中前两段，我把这部分拿掉了，力求准确。</li><li>细化一下pac文件中host判断的顺序，现在生成的pac文件中查找代理的顺序大概是这个样子:</li></ul><blockquote><p>是否是PlanHost或者localhost-&gt;是否以cn结尾-&gt;是否在safeDomains-&gt;是否在dangerDomains-&gt;是否为内网网址-&gt;是否访问safePorts-&gt;是否为dns污染过的fakeIP-&gt;是否为国内ip段。</p></blockquote><p>其中判断safeDomains和dangerDomains用的是gfwlist2pac的方法，按照clowwindy的说法，应该是O(1)的复杂度。 我把判断IP是否为fakeIP以及是否归属于国内IP段的查找放在了最后，因为这是整个pac文件最耗时的部分，如果要访问的网址在白名单safeDomain或者在黑名单dangerDomain中，直接在前面就返回了，不会去做DNS解析，也不会进入的复杂的查找部分。</p><p>这样整个优化后的文件就比较符合我个人的需求了，performance也算有了一个折中，通过黑名单和白名单的方式来提高Performance,最后的iplist查找作为保底，使用过程中速度还算有了一个提高，并且对国外网站的访问也算有了加速的效果。算是一种折中方案。</p><p>整个项目Fork自Flora_pac, 地址戳<a href="https://github.com/usufu/Flora_Pac" target="_blank" rel="external">这里</a>。</p><p>用法也很简单，有两种方式：</p><ul><li><p>直接用我生成好的<a href="https://github.com/usufu/Flora_Pac/raw/master/flora_pac.pac" target="_blank" rel="external">flora_pac.pac</a>文件, 修改其中的<code>out_gfw_proxy</code>为你自己的地址，<code>iproxy</code>为内网代理，如果没有则保持<em>DIRECT</em>。</p></li><li><p>clone整个项目，修改脚本test_build.sh中的代理为自己的。如果需要设定内网代理，则添加-i参数。然后运行这个脚本就会去拿最新的cniplist然后生成你自己的pac文件了。</p></li><li><p>由于我使用了jsmin这个库来压缩pac文件，减小体积，运行时如果提示缺少这个东东，自己pip install jsmin一下。flora_pac_min.pac为压缩后的pac文件，内容和flora_pac.pac一样，就是不太好修改，可以放在移动设备上，怎么用任你选择。</p></li></ul><p>在此还是要感谢gfwlist2pac和Floar_pac给我带来的方便。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下清理支付宝控件的傀儡服务]]></title>
      <url>https://blog.v2root.com/2014/07/31/macxia-qing-li-zhi-fu-bao-kong-jian-de-gui-lei-fu-wu/</url>
      <content type="html"><![CDATA[<p>今天在网上看到一篇<a href="http://blog.superliufa.com/2014/07/Alipaybsm-RawSocket.html" target="_blank" rel="external">文章</a>, 大概意思是说安装支付宝控件后它会启动一个特殊的进程在后台搞些你不知道的把戏，比如监控流量啊什么的，虽说在国内不流氓无软件已经见怪不怪了，但是没想到这么应该让人信任的东西还是要搞点份外的事情来做，实在是让人愕然。国内这些大公司的软件安装的时候一不小心就中招了，给你装一大堆屎一样的东西强奸你的机器，真是太狗屎了，妈的。所以说没有监管是不行的，否则就像现在一样在你的机器里各自占山为王，颇有土匪的味道。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/image/2/8f/8b6db31008e82ae7dc0b2e2995eb4.jpg" alt="cover-image"><br>说到Mac和iPhone，这是我目前比较喜欢的两个OS了，iPhone不越狱用起来还是比较让人省心，不用担心什么后台service，开机一个多月也不用杀进程，只管用就ok，而且有Apple帮你审核一遍App也算是目前比较安全可靠，只要你手别犯贱去装一些来路不明的软件，你的手机应该还算是大部分在你的掌控之下。Mac呢毕竟还算是小众，流氓软件想在MAC上搞一遍windows上的伎俩技术成本还是有一点，而且没有太大的利益可图，但是，我们也不能放松警惕。</p><p>好了，废话说了这么多，今天看了上面提到的博文之后，就顺手看了看支付宝在Mac下面有没有启动什么特殊的服务，这一看，还真有，那咋办，开搞呗。</p><p>首先，我们来看一看支付宝到底启动了些什么服务，可以在终端下运行这个简单的命令看一看</p><blockquote><p>ps aux | grep Ali</p></blockquote><p>在我的机器上会有如下的输出：<br><img src="https://dn-ghost-v2root.qbox.me/image/b/a0/075032ae35143f7adf35ffbc233fb.jpg" alt=""><br>看见没，还真有个叫做<code>AlipayDispatcherService</code>的东东，第一反应是直接<code>sudo kill -9 6369</code>，但结果往往不是那么的尽如人意-kill之后会再次启动，看来是作为开机Service启动了。下面一步就是把这个开机启动的服务给禁用掉，这期间我参考了这篇<a href="http://kenwublog.com/mac-os-launchd-tuning" target="_blank" rel="external">文章</a>，里面说的很详细，有关Mac优化启动服务的内容。</p><p>最后我找到了两个和阿里有关的服务：</p><blockquote><p>~/Library/LaunchAgents/com.alipay.refresher.plist<br>/Library/LaunchDaemons/com.alipay.DispatcherService.plist</p></blockquote><p>其中一个是在用户目录下，一个是在根目录下。</p><p>根据Mac启动优化文章里所讲的步骤，把他们一一Disable掉就ok了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo launchctl unload /Library/LaunchDaemons/com.alipay.DispatcherService.plist</div><div class="line">sudo launchctl unload ~/Library/LaunchAgents/com.alipay.refresher.plist</div></pre></td></tr></table></figure><p>其中第二条命令有可能输出Error，没事不用Care。</p><p>现在我们再去执行<code>kill</code>指令，那么这个DispatcherService的服务就可以被干掉了，开机也不会启动了。支付宝登录服务也正常。</p><p>还有另外一个广为流传的问题，就是支付宝会添加系统根证书：</p><p><img src="https://dn-ghost-v2root.qbox.me/image/2/8f/8b6db31008e82ae7dc0b2e2995eb4.jpg" alt=""></p><p>很简单，找到Alipay的证书，直接右键始终不信任就可以。</p><p>出现这些问题的根源，还是不信任，或许支付宝并没有利用这些技术干什么事情，但是人们还是对他不信任，因为它想它就可以。</p><p>有时候想想，太自由没人管，也不是一件好事情，我们可能就会像现在的电脑一样，被一个个强大的土匪乱入。</p><p>P.S: 今天还学到一个Linux命令<code>strace</code>，执行<code>strace xxx</code>可以看到xxx都去读取了哪些文件，以及fopen的返回值，具体没细琢磨，先记录一下。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 1, Single Number I]]></title>
      <url>https://blog.v2root.com/2014/07/30/leetcode-1-single-number-i/</url>
      <content type="html"><![CDATA[<p>今天研究第一个LeetCode问题，按照计划AC Rate排序，通过率最高的就属这个了，那么就拿他当做入门第一课吧。</p><h3 id="题目-single-number-i">题目 <a href="https://oj.leetcode.com/problems/single-number/" target="_blank" rel="external">Single Number I</a></h3><p>Given an array of integers, every element appears twice except for one. Find that single one.<br><strong>Note</strong>:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/write-code.png" alt=""></p><h3 id="解题过程">解题过程</h3><p><strong>独立分析：</strong></p><p><em>实话实说，这个我自己硬是没有想到好的算法来满足题目的要求，悲哀。排序什么的，直接太弱了</em></p><p><strong>网络提示：</strong></p><p>根据Google的搜索结果找到了这里: <a href="http://http://blog.csdn.net/kenden23/article/details/13625297" target="_blank" rel="external">靖空间</a></p><p>原文已经分析的很透彻了，解决这道题的主要思路就是用位运算，这玩意平常在代码里看到很多奇淫巧技都用位来操作，比如对个齐啊，算个地址啊等等，但看来自己还是没有掌握，今天就没有想起来，离散数学没学好，对位的操作没有理解到位。</p><p>异或的核心思想就是：a⊕b = (¬a ∧ b) ∨ (a ∧¬b)</p><p>换做通俗一点的话讲：如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。</p><p>根据这个道理，那么这道题就可以这样写了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    	assert(A != <span class="literal">NULL</span> &amp;&amp; n &gt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            x = x ^ A[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>每一次让x去和数组里面的数做一次异或运算，那么当两个数相同的时候，对应的位就会被清空，留在最后的就是那个落单的了。</p><p>位运算原来还能这样玩，计算机理论里面的东西看来只有做做算法题才能巩固了。</p><p>今天第一天，找个简单的练手，没想到还是摔了，木事，站起来继续</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习学习再学习]]></title>
      <url>https://blog.v2root.com/2014/07/30/xue-xi-xue-xi-zai-xue-xi/</url>
      <content type="html"><![CDATA[<p>和写博客一样，计划了很久要把学过的算法重新捡起来，结果每次都是半途而废，无法多坚持几天。桌子上有关算法的书摆了一大堆，但是都没有看完过，除了上学时学的《算法导论》之外，基本都处于全新状态，实在是都有点不好意思把这些书放在这里了，我有一颗学好算法的心，但总是力不足，无法坚持，只能YY。</p><p>最近借着新博客安家的东风，希望有时间能继续完成我未完待续的“事业”，那就是不要在面试的时候害怕算法设计题，工作中的算法其实还好，大家讨论讨论，Google一下总能有思路，可是要是真面试的时候就有压力了，做不出来总觉得很丢人，计算机科学可不就是算法+数据结构么，这都不会还扯啥蛋呢。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/@/image/IMG_0638.JPG" alt="cover-image"></p><p>以前总有一种心态，没事干老面试啥算法啊，工作中又不是天天让你写这些很tricky的算法，大部分时间还是砌墙码转的，何必这么为难人呢？后来随着时间慢慢的流失，自己慢慢的变老，当激情不在的时候，才慢慢体会到计算机科学真正核心的东西也还是它的本质，那就是算法了，做为一个搞计算机科班出身的人，丢掉算法，如同你失去了可以去闯荡世界的武器。</p><p>为什么大型的互联网公司不管什么，上来先面试算法呢？(当然这要排除已经在一些领域有所成就的人物，他们的价值已经体现的很透彻了，还需要啥面试。)我觉得现在这个互联网大数据的时代，产品更新迭代很快，需要码农门有很强的代码功底以及逻辑思维能力，说白了我觉得就是看你有没有活力，脑子还能不能转起来，给你一个稍微有点需要动脑子的活能不能hold住，这应该是面试的主要目的，而不是难为你。灵活运用算法的人，到了新的领域，面对新的未知问题，解决这些问题的速度和质量令人满意的概率是比较大的，这也许就是当今Google，Facebook之类的技术面试仍然以算法为主的原因了吧。</p><p>回过头来在看看我司，平时基本半毛钱算法的东西都不会用到，干的事情基本属于码畜阶段，就是刷image，push一些库，看看能不能work，不怎么写代码，手都生了，别提算法了，写代码也就是调用一些别人写好的API，组个轮子而已。所以我打算学习算法，倒不是为了跳槽，只是让自己的头脑不能锈掉。其实我司的工作环境很好，能学到很多东西，但离我所喜欢的计算机科学差太远。</p><p>我周围的很多人都不怎么折腾和计算机有关的玩意儿，对他们来说所有和计算机有关的事情就是在单位所做的，也不是太关心IT圈的发展，更不会去主动尝试一些新东西，只是把搞计算机当做工作的工具而不是自己喜欢的事情，这点和我的三观还是太不一样，我为啥喜欢瞎折腾，喜欢搞IT，就是因为它总是能带给我一些新奇的东西，不管有啥新技术新语言，我还是喜欢看一看，不求精通，但求了解，要知道这玩意是干嘛的。从高一的第一台电脑开始写代码到现在，我仍然对计算机技术充满了兴趣，计算机科技的每一次进步，我都充满了好奇与探索的渴望。</p><p>想了想，给自己指定了一个简单的计划，不比上学大把大把的时间可以用来戳，现在的时间太宝贵了，只能尽我所能了，从头一点一点看书估计是不太现实了，所以我的想法是这样的：</p><blockquote><p>通过做题来学习算法，遇到不懂的知识点再去查漏补缺，看教科书。</p></blockquote><p>具体的计划大概是这个样子：</p><ul><li>有空就去做一道LeetCode，从易到难，也就是按AC Rates排序一下，从最高的开始做起。</li><li>先自己动脑筋想一想，想想思路，有了思路再写代码，没有自己写出一个soltion之前不要轻易看答案。如果实在是憋不出来，那就研究下网上怎么实现的，不能太打击自己积极性。</li><li>对比下自己的和网上的，看看这道题都考了哪些知识点，总结一下，记录在这里, 以<code>LeetCode</code> <code>Algorithm</code> <code>Study</code> 做为tag。</li><li>这个过程肯定很漫长，而且刚开始的时候很容易放弃，不要太急，慢慢来，就当玩玩，总比没事就刷微博要有意义。</li></ul><p>想法就是这个样子，我也不知道能坚持多久，立此存照吧。</p><p>加油！</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生命不息，折腾不止]]></title>
      <url>https://blog.v2root.com/2014/07/29/sheng-ming-bu-xi-zhe-teng-bu-zhi/</url>
      <content type="html"><![CDATA[<p>一直有想找个地方写点东西，能让自己看看记录一下的想法，但总是找不到合适的地点和工具，Github试用了一段时间，总觉得太Geek不适合，每次写文章还要git push,还待自己找带预览的Markdown工具，而且有时候你本地预览的效果和放在网上效果不一样的时候又待改半天，这让我燃起的兴趣少了大半分，渐渐的也就懒得玩了。</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/image/8/1f/38b450cfec6daf1a9a080ebe37138.JPG" alt="cover-image"><br>其间断断续续折腾了好久，直到有天看见V2EX上面有个小孩发了个为什么写博客的帖子，又把我的兴致勾起来了。就在上周六，我终于花了一天时间把这个地方搞的差不多了，从配置DO的服务器，到修改Ghost的主题，再到全站启用https访问真是太折腾了！但我有种预感，我还待折腾，因为不知道是因为5$太便宜挤的人太多了的缘故还是DO的线路不太好，晚上8点到11点上网高峰期卡出翔了！！</p><p>这个Ghost还真是挺满足我的需求，功能简单单一，后台写作实时预览，没有什么太多的插件可以玩，总之就是很适合写点东西的场所，而且还有很多丰富的主题，无聊的时候大可以把玩把玩主题啥的哈哈，正<s>入</s>如文章标题所说的，生命不息，折腾不止嘛，这句话要是放在我单位的身上，那就是<code>生命不息，Reorg不止</code>喽。</p><p>今天就先写到这儿吧，很久没有早睡了，每次都说早点睡但就是能折腾到这个时间点上，还能咋整呢。</p><p>最后作为总结，说明博客已经跑通了，上专业术语：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(“Hello, V2ROOT!\n”);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也不知道这玩意能不能高亮呢~</p><p>另外，我还是比较喜欢这张壁纸</p><p><img src="https://dn-ghost-v2root.qbox.me/image/6/f2/74492ab41e75f9bc763446bfde700.jpg" alt="wallpaper"></p><p><em>躺床上读了一遍，发现一个错别字，强迫症犯可就不待给改了嘛！代码高亮还是木有，罢了罢了，码农精神收一收。</em></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to Ghost!]]></title>
      <url>https://blog.v2root.com/2014/07/27/welcome-to-ghost/</url>
      <content type="html"><![CDATA[<p>You’re live! Nice. We’ve put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p><a id="more"></a><p><img src="https://dn-ghost-v2root.qbox.me/image/8/1f/38b450cfec6daf1a9a080ebe37138.JPG" alt=""></p><h2 id="getting-started">Getting Started</h2><p>Ghost uses something called Markdown for writing. Essentially, it’s a shorthand way to manage your post formatting as you write!</p><p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p><ul><li>Item number one</li><li>Item number two<ul><li>A nested item</li></ul></li><li>A final item</li></ul><p>or with numbers!</p><ol><li>Remember to buy some milk</li><li>Drink the milk</li><li>Tweet that I remembered to buy the milk, and drank it</li></ol><h3 id="links">Links</h3><p>Want to link to a source? No problem. If you paste in url, like <a href="http://ghost.org" target="_blank" rel="external">http://ghost.org</a> - it’ll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here’s a link to <a href="http://ghost.org" target="_blank" rel="external">the Ghost website</a>. Neat.</p><h3 id="what-about-images">What about Images?</h3><p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p><p><img src="https://www.v2root.com/content/images/2014/Jul/ghost.png" alt="The Ghost Logo"></p><p>Not sure which image you want to use yet? That’s ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p><p><img src="https://dn-ghost-v2root.qbox.me/image/e/26/dbfd85b7beaaa6c9ed83a81191389.JPG" alt="cover-image"></p><h3 id="quoting">Quoting</h3><p>Sometimes a link isn’t enough, you want to quote someone on what they’ve said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it’s definitely a word.</p><blockquote><p>Wisdomous - it’s definitely a word.</p></blockquote><h3 id="working-with-code">Working with Code</h3><p>Got a streak of geek? We’ve got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p><pre><code>.awesome-thing {
    display: block;
    width: 100%;
}
</code></pre><h3 id="ready-for-a-break">Ready for a Break?</h3><p>Throw 3 or more dashes down on any new line and you’ve got yourself a fancy new divider. Aw yeah.</p><hr><h3 id="advanced-usage">Advanced Usage</h3><p>There’s one fantastic secret about Markdown. If you want, you can write plain old HTML and it’ll still work! Very flexible.</p><input type="text" placeholder="I'm an input field!"><p>That should be enough to get you started. Have fun - and let us know what you think :)</p>]]></content>
    </entry>
    
  
  
</search>
